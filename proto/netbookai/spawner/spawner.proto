syntax = "proto3";

option go_package = "/spawner";

package spawner;

// The Spawner service definition
service SpawnerService {
  rpc HealthCheck(Empty) returns (Empty) {}

  rpc Echo(EchoRequest) returns (EchoResponse) {}

  // Spawn required cluster
  rpc CreateCluster(ClusterRequest) returns (ClusterResponse) {}

  // Create add token to secret manager
  rpc AddToken(AddTokenRequest) returns (AddTokenResponse) {}

  // Create get token to secret manager
  rpc GetToken(GetTokenRequest) returns (GetTokenResponse) {}

  // Add Route53 record for Caddy
  rpc AddRoute53Record(AddRoute53RecordRequest)
      returns (AddRoute53RecordResponse) {}

  // Get Cluster
  rpc GetCluster(GetClusterRequest) returns (ClusterSpec) {}

  // Get Clusters
  rpc GetClusters(GetClustersRequest) returns (GetClustersResponse) {}

  // Spawn required instance
  rpc AddNode(NodeSpawnRequest) returns (NodeSpawnResponse) {}

  // Status of cluster
  rpc ClusterStatus(ClusterStatusRequest) returns (ClusterStatusResponse) {}

  // Delete Cluster
  rpc DeleteCluster(ClusterDeleteRequest) returns (ClusterDeleteResponse) {}

  // Delete Node
  rpc DeleteNode(NodeDeleteRequest) returns (NodeDeleteResponse) {}

  // Create Volume
  rpc CreateVolume(CreateVolumeRequest) returns (CreateVolumeResponse) {}

  // Delete Vol
  rpc DeleteVolume(DeleteVolumeRequest) returns (DeleteVolumeResponse) {}

  rpc CreateSnapshot(CreateSnapshotRequest) returns (CreateSnapshotResponse) {}

  rpc DeleteSnapshot(DeleteSnapshotRequest) returns (DeleteSnapshotResponse) {}

  rpc CreateSnapshotAndDelete(CreateSnapshotAndDeleteRequest)
      returns (CreateSnapshotAndDeleteResponse) {}

  rpc RegisterWithRancher(RancherRegistrationRequest)
      returns (RancherRegistrationResponse) {}

  rpc GetWorkspacesCost(GetWorkspacesCostRequest)
      returns (GetWorkspacesCostResponse) {
    option deprecated = true;
  }

  rpc GetApplicationsCost(GetApplicationsCostRequest)
      returns (GetApplicationsCostResponse) {}

  rpc WriteCredential(WriteCredentialRequest)
      returns (WriteCredentialResponse) {}

  rpc ReadCredential(ReadCredentialRequest) returns (ReadCredentialResponse) {}

  rpc GetKubeConfig(GetKubeConfigRequest) returns (GetKubeConfigResponse) {}
  rpc TagNodeInstance(TagNodeInstanceRequest)
      returns (TagNodeInstanceResponse) {}

  rpc GetCostByTime(GetCostByTimeRequest) returns (GetCostByTimeResponse) {}

  rpc GetContainerRegistryAuth(GetContainerRegistryAuthRequest)
      returns (GetContainerRegistryAuthResponse) {}

  rpc CreateContainerRegistryRepo(CreateContainerRegistryRepoRequest)
      returns (CreateContainerRegistryRepoResponse) {}

  rpc RegisterClusterOIDC(RegisterClusterOIDCRequest)
      returns (RegisterClusterOIDCResponse) {}

  rpc CreateRoute53Records(CreateRoute53RecordsRequest)
      returns (CreateRoute53RecordsResponse) {}

  rpc GetRoute53TXTRecords(GetRoute53TXTRecordsRequest)
      returns (GetRoute53TXTRecordsResponse) {}

  rpc DeleteRoute53Records(DeleteRoute53RecordsRequest)
      returns (DeleteRoute53RecordsResponse) {}
  rpc CopySnapshot(CopySnapshotRequest) returns (CopySnapshotResponse) {}

  rpc PresignS3Url(PresignS3UrlRequest) returns (PresignS3UrlResponse) {}
}

message Empty {}

message EchoRequest {
  string msg = 1;
}
message EchoResponse {
  string msg = 1;
}

enum MIGProfile {
  UNKNOWN = 0;
  MIG1g = 1;
  MIG2g = 2;
  MIG3g = 3;
  MIG4g = 4;
  MIG7g = 5;
}

enum CapacityType {
  TypeUKNOWN = 0;
  ONDEMAND = 1;
  SPOT = 2;
}

message NodeSpec {
  string name = 1;
  string instance = 2;
  int32 diskSize = 3;
  string hostName = 4;
  string state = 5;
  string uuid = 6;
  string ipAddr = 7;
  string availabilityzone = 8;
  string clusterId = 9;
  map<string, string> labels = 10;
  bool gpu_enabled = 11;
  Health health = 12;
  MIGProfile migProfile = 13;
  int64 count = 14;
  CapacityType capacityType = 15;
  repeated string spotInstances = 16;
  string machineType = 17;
}

message Issue {
  string code = 1;
  string description = 2;
  repeated string resourceIds = 3;
}

message Health {
  repeated Issue issue = 1;
}

message ClusterRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
  string clusterName = 4;
  NodeSpec node = 5;
  map<string, string> labels = 6;
}

message GetClusterRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
  string clusterName = 4;
}

message GetClustersRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
}

message ClusterSpec {
  string name = 1;
  string clusterId = 2;
  repeated NodeSpec nodeSpec = 3;
}

message GetClustersResponse {
  repeated ClusterSpec clusters = 1;
}

message ClusterResponse {
  string clusterName = 1;
  string nodeGroupName = 2;
  string error = 3;
}

message ClusterStatusRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
  string clusterName = 4;
}

message ClusterStatusResponse {
  string status = 1;
  string error = 2;
}

message AddTokenRequest {
  string provider = 1;
  string region = 2;
  string clusterName = 3;
}

message AddTokenResponse {
  string status = 1;
  string error = 2;
}

message GetTokenRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
  string clusterName = 4;
}

message GetTokenResponse {
  string token = 1;
  string endpoint = 2;
  string status = 3;
  string error = 4;
  string ca_data = 5;
}

message AddRoute53RecordRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
  string dnsName = 4;
  string recordName = 5;
}

message AddRoute53RecordResponse {
  string status = 1;
  string error = 2;
}

message NodeSpawnRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
  string clusterName = 4;
  NodeSpec nodeSpec = 5;
}

message NodeSpawnResponse {
  string error = 2;
}

message ClusterDeleteRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
  string clusterName = 4;
  bool forceDelete = 5;
}

message ClusterDeleteResponse {
  string error = 1;
}

message NodeDeleteRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
  string clusterName = 4;
  string nodeGroupName = 5;
}

message NodeDeleteResponse {
  string error = 1;
}

message CreateVolumeRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
  string availabilityzone = 4;
  string volumetype = 5;
  int64 size = 6;
  string snapshotid = 7;
  map<string, string> labels = 8;
  string snapshotUri = 9;
  bool deleteSnapshot = 10;
}

message CreateVolumeResponse {
  // volume id is name
  string volumeid = 1;
  string error = 2;
  string resource_uri = 3;
}

message DeleteVolumeRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
  string volumeid = 4;
}

message DeleteVolumeResponse {
  bool deleted = 1;
  string error = 2;
}

message CreateSnapshotRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
  string volumeid = 4;
  map<string, string> labels = 5;
}

message CreateSnapshotResponse {
  string snapshotid = 1;
  // must retain tag for backward compatibilty, left in commet for reference
  // string error = 2;
  string snapshotUri = 3;
}

message CreateSnapshotAndDeleteRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
  string volumeid = 4;
  map<string, string> labels = 5;
}

message CreateSnapshotAndDeleteResponse {
  string snapshotid = 1;
  bool deleted = 2;
  // must retain tag for backward compatibilty, left in commet for reference
  // string error = 3;
  string snapshotUri = 4;
}

message RancherRegistrationRequest {
  string clusterName = 1;
}

message RancherRegistrationResponse {
  // must retain tag for backward compatibilty, left in commet for reference
  // string error = 1;
  string clusterName = 2;
  string clusterID = 3;
  string manifestURL = 4;
}

message GetWorkspacesCostRequest {
  option deprecated = true;
  string provider = 2;
  repeated string workspaceIds = 1;
  string accountName = 3;
  string startDate = 4;
  string endDate = 5;
  string granularity = 6;
  string costType = 7;
  GroupBy groupBy = 8;
}

message GetApplicationsCostRequest {
  repeated string applicationIds = 1;
  string provider = 2;
  string accountName = 3;
  string startDate = 4;
  string endDate = 5;
  string granularity = 6;
  string costType = 7;
  GroupBy groupBy = 8;
}

message GroupBy {
  string type = 1;
  string key = 2;
}

message GetWorkspacesCostResponse {
  int64 totalCost = 1;
  map<string, int64> groupedCost = 2;
}

message GetApplicationsCostResponse {
  int64 totalCost = 1;
  map<string, int64> groupedCost = 2;
}

message AwsCredentials {
  string accessKeyID = 1;
  string secretAccessKey = 2;
  string token = 3;
}

message AzureCredentials {
  string subscriptionID = 1;
  string tenantID = 2;
  string clientID = 3;
  string clientSecret = 4;
  string resourceGroup = 5;
}

message GithubPersonalAccessToken {
  string token = 1;
}

message GcpCredentials {
  string projectID = 1;
  string certificate = 2;
}

message WriteCredentialRequest {
  string account = 1;
  string provider = 2 [deprecated = true];
  string type = 5;
  oneof cred {
    AwsCredentials awsCred = 3;
    AzureCredentials azureCred = 4;
    GithubPersonalAccessToken gitPat = 6;
    GcpCredentials gcpCred = 7;
  }
}

message WriteCredentialResponse {
  string error = 1;
}

message ReadCredentialRequest {
  string account = 1;
  string provider = 2 [deprecated = true];
  string type = 3;
}

message ReadCredentialResponse {
  string account = 1;
  string provider = 2 [deprecated = true];
  string type = 5;
  oneof cred {
    AwsCredentials awsCred = 3;
    AzureCredentials azureCred = 4;
    GithubPersonalAccessToken gitPat = 6;
    GcpCredentials gcpCred = 7;
  }
}

message GetKubeConfigRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
  string clusterName = 4;
  bool rawToken = 5;
}
message GetKubeConfigResponse {
  string clusterName = 1;
  bytes config = 2;
}

message TagNodeInstanceResponse {}

message TagNodeInstanceRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
  string clusterName = 4;
  string nodeGroup = 5;
  map<string, string> labels = 6;
}

message GetCostByTimeRequest {
  string provider = 1;
  repeated string Ids = 2;
  string accountName = 3;
  string startDate = 4;
  string endDate = 5;
  string granularity = 6;
  GroupBy groupBy = 7;
}

message GetCostByTimeResponse {
  map<string, costMap> groupedCost = 1;
}

message costMap {
  map<string, int64> cost = 1;
}

message GetContainerRegistryAuthRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
}

message GetContainerRegistryAuthResponse {
  string url = 1;
  string token = 2;
}

message CreateContainerRegistryRepoResponse {
  string registryId = 1;
  string url = 2;
}
message CreateContainerRegistryRepoRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
  string name = 4;
  map<string, string> tags = 5;
}

message DeleteSnapshotRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
  string snapshotId = 4;
}
message DeleteSnapshotResponse {}

message RegisterClusterOIDCRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
  string clusterName = 4;
}

message RegisterClusterOIDCResponse {}

message Route53ResourceRecordSet {
  // provide fqdn
  string name = 1;
  string type = 2;
  int64 ttlInSeconds = 3;
  repeated Route53ResourceRecord resourceRecords = 4;
}

message Route53ResourceRecord {
  string value = 1;
}

message CreateRoute53RecordsRequest {
  repeated Route53ResourceRecordSet records = 1;
}

message CreateRoute53RecordsResponse {}

message GetRoute53TXTRecordsRequest {}

message GetRoute53TXTRecordsResponse {
  repeated Route53ResourceRecordSet records = 1;
}

message DeleteRoute53RecordsRequest {
  repeated Route53ResourceRecordSet records = 1;
}

message DeleteRoute53RecordsResponse {}

message CopySnapshotRequest {
  string provider = 1;
  string region = 2;
  string accountName = 3;
  string snapshotId = 4;
  string snapshotUri = 5;
  map<string, string> labels = 6;
}

message CopySnapshotResponse {
  string newSnapshotId = 1;
  string newSnapshotUri = 2;
}

message PresignS3UrlRequest {
  string region = 1;
  string accountName = 2;
  string bucket = 3;
  string file = 4;
  int32 timeoutInMinute = 5;
}

message PresignS3UrlResponse {
  string signedUrl = 1;
}
